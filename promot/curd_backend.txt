# Part 1
## 项目规范
- 使用gorm作为orm层
- 一个完整的接口至少包括 api层,service层,model层,requet层,routers层,response层 6个层级
- curd操作请学习并模仿下方代码示例的分层写法
## 业务概念
- 达人: 一个用户会关联多个达人,用户id是user_id,达人id是author_id,两者不相同,是一对多的概念
## 常用方法

### 获取蝉选数据库gorm.DB实例
```golang
  // global.JX_DB 如下:
  err = global.JX_DB.Create(banner).Error
  // 验证请求参数的page和size是否符合规范
  valid.ValidPageParams(&req.Page, &req.Size, 5*constant.MaxPagesize)
```
## 代码示例
### ddl
### model层
文件:`model/jxdata/jx_good_banner_model.go`
```golang
package jxdata
import (
	"adminserver/global"
	"adminserver/model/jxdata/constant"
	"time"
)
// JxGoodBanner 商品栏目
type JxGoodBanner struct {
	ID           int       `gorm:"primaryKey;column:id;type:int(11);not null" json:"id"`
	Name         string    `gorm:"column:name;type:varchar(255);not null;default:''" json:"name"` // 栏目名称
	Desc         string    `gorm:"column:desc;type:varchar(1000);not null" json:"desc"`           // 简介
	Status       int       `gorm:"column:status;type:int(11);not null;default:0" json:"status"`   // 状态 1未启用   2启用
	Sort         int       `gorm:"column:sort;type:int(11);not null;default:0" json:"sort"`                   // 排序
    CreatedAt    time.Time `gorm:"column:created_at;type:datetime"`
	UpdatedAt    time.Time `gorm:"column:updated_at;type:datetime"`
}
// 返回对应的表名
func (m *JxGoodBanner) TableName() string {
	return "jx_good_banner"
}

```
### service层
文件:`service/jingxuan/jx_good_banner_service.go`
```golang
package jingxuan

import (
	"adminserver/global"
	"adminserver/model/jxdata/request"
    "adminserver/model/jxdata/response"
)

type JxGoodBannerService struct {
}

func NewJxGoodBannerService() *JxGoodBannerService {
	return new(JxGoodBannerService)
}
// 添加栏目
func (service *JxGoodBannerService) Add(bannerReq *request.AddBannerReq) (err error) {
    banner := new(jxdata.JxGoodBanner)
    banner.Name = bannerReq.Name
    banner.Desc = bannerReq.Desc
    banner.Status = 1
    err = global.JX_DB.Create(banner).Error
	return
}

// 获取栏目映射 id->name
func (service *JxGoodBannerService) GetBannerMap() (res map[int]*response.Info, err error) {
	lst = make([]*JxGoodBanner, 0)
	err = global.JX_DB.Where("status = ?", constant.JxGoodBannerStatusEnable).Order("sort asc").Find(&lst).Error
	if err != nil {
		return
	}
	res = make(map[int]string, 0)
	for _, item := range lst {
        info := new(response.Info)
        info.Name = item.Name			
        info.Msg = fmt.Sprintf("%v很不错!",item.Name)
		// 转化成 model.Time的格式
		info.CreatedAt = model.Time(item.CreatedAt)
		res[item.ID] = info
	}
	return
}
```
### request层
文件:`model/jxdata/request/jx_good_banner_request.go`
```golang
package request
type AddBannerReq struct {
	Name         string `json:"name" form:"name" validate:"required"`
	Desc         string `json:"desc" form:"desc" validate:"required"`
}
```
### response层
文件:`model/jxdata/response/jx_good_banner_reponse.go`
```golang
import "adminserver/model"
type Info struct {
	Name        string `json:"name"`
	Msg         string `json:"msg"`
	CreatedAt   model.Time `json:"created_at"` // 使用model.Time时间类型,json解析后的格式对人友好
}
```
### api层
文件:`api/v1/jingxuan/jx_good_banner_api.go`
```golang
package jingxuan

import (
	"adminserver/model/common/response"
	"adminserver/model/jxdata/request"
	"adminserver/service/jingxuan"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/gookit/validate"
)

type JxGoodBannerApi struct {
}

func (*JxGoodBannerApi) Add(c *gin.Context) {
	var req request.AddBannerReq
	err := c.ShouldBindJSON(&req)
	if err != nil {
		response.FailWithMessage(fmt.Sprintf("%+v", err), c)
		return
	}
    // 验证请求参数
	vv := validate.Struct(req)
	if !vv.Validate() {
		response.FailWithMessage(fmt.Sprintf("%+v", vv.Errors.One()), c)
		return
	}
	err = jingxuan.NewJxGoodBannerService().Add(req)
	if err != nil {
		response.FailWithMessage(err.Error(), c)
	} else {
		response.OkWithDetailed("", "添加成功", c)
	}
}

func (*JxGoodBannerApi) GetBannerMap(c *gin.Context) {
	// var req request.GetBannerMapReq
	// get 请求参数使用 ShouldBindQuery
	// err := c.ShouldBindQuery(&req)
	// if err != nil {
	// 	response.FailWithMessage(fmt.Sprintf("%+v", err), c)
	// 	return
	// }
	data, err := jingxuan.NewJxGoodBannerService().GetBannerMap()
	if err != nil {
		response.FailWithMessage(err.Error(), c)
		return
	}
	response.OkWithDetailed(data,"操作成功", c)
}
```
### router层
文件:`router/jingxuan/jx_good_banner_router.go`
```golang
package jingxuan
import (
	v1 "adminserver/api/v1"
	"github.com/gin-gonic/gin"
)
type JxGoodBannerRouter struct {
}
func (rec *JxGoodBannerRouter) InitJxGoodBannerRouter(Router *gin.RouterGroup) {
	router := Router.Group("banner")
	var api = v1.ApiGroupApp.JxApiGroup.JxGoodBannerApi
	router.GET("get-banner-map", api.GetBannerMap)
	router.POST("add", api.Add)
}
```
### yapi接口文档
```json
{
  "token":"39d9d4b04e4468e462ed2e7724a8d7b57f687258e211c0712e71671f7c7bcb68",//固定
   "catid": "10429",//固定
   "req_query":  [
            {
                "required": "1",
                "_id": "646ddee766ad5375d9ea42b3",//_id是唯一的
                "name": "page",
                "example": "",
                "desc": "页码，从1开始"
            },
            {
                "required": "1",
                "_id": "646ddee766ad5375d9ea42b2",//_id是唯一的
                "name": "size",
                "example": "",
                "desc": "(1,100)"
            },
            {
                "required": "1",
                "_id": "646ddee766ad5375d9ea42b1",//_id是唯一的
                "name": "keyword",
                "example": "",
                "desc": "搜索词"
            }
        ],
   "req_headers": [
   ],
   "req_body_form": [],
   "title": "达人搜索",
   "res_body_is_json_schema": true,
"req_body_is_json_schema": true,
   "path": "/v1/author/search2",
   "status": "done",
   "res_body_type": "json",
    "res_body": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"rid\":{\"type\":\"string\"},\"code\":{\"type\":\"number\"},\"msg\":{\"type\":\"string\"},\"data\":{\"type\":\"object\",\"properties\":{\"list\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"avatar\":{\"type\":\"string\",\"description\":\"达人头像\"}},\"required\":[\"avatar\"]}},\"page_info\":{\"type\":\"object\",\"properties\":{\"page\":{\"type\":\"number\"},\"size\":{\"type\":\"number\"},\"total_count\":{\"type\":\"number\"},\"total_page\":{\"type\":\"number\"}},\"required\":[\"page\",\"size\",\"total_count\",\"total_page\"]}},\"required\":[\"list\",\"page_info\"]}},\"required\":[\"rid\",\"code\",\"msg\",\"data\"]}",
    "req_body_other": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"kw\":{\"type\":\"string\"}}}",//仅post请求有效
    "req_body_type": "json",
   "message": "1",
   "desc": "",
   "method": "GET",
   "req_params": []
}
```

## 编码规则
- 每个函数或者方法,应该有中文注释,供人查阅
- 要保证接口的性能,善用go的协程,并发获取数据,确保响应时间更多
- 数据库压力比较大,不要单独在循环语句中逐条查询相关数据,尽可能批量查询
- 防止sql注入
# Part 2
## 额外方法
无
## 已完成的代码
```sql
create table jx_biz_cat
(
    id           int auto_increment,
    staff_uuid   varchar(50) not null comment '招商id',
    staff_name   varchar(50) null comment '招商名字',
    sub_cat_id   int         null comment '商品二级分类id',
    sub_cat_name varchar(50) null comment '商品二级分类名字',
    shop_id_enc  varchar(15) null comment '加密的店铺id',
    shop_name    int         null comment '店铺名称',
    created_at   datetime    null,
    updated_at   datetime    null,
    deleted_at   datetime    null
)
    comment '商品线索池-招商类目归属表';


```
## 需要被关联的表

## 搜索条件
根据招商人员ID搜索;
根据二级类目id搜索;
根据商家名称搜索;
------------
请仔细阅读并理解上面 <Part 1> 和 <Part 2>的内容, 实现下面的需求:
# 需求
- 判断下<Part 2>的<额外方法>是否提供有效的内容,如果是,请思考如何调用<Part 2>的<额外方法>实现下面相关的功能
- 判断下<Part 2>的<已完成的代码>是否提供有效的内容,如果是,请思考如何从<Part 2>的<已完成的代码>后面,继续编写其他层级的代码

- 功能: 实现列表接口,需要满足上面的搜索条件和分页;新增数据接口;更新店铺id和店铺名称接口;删除接口

- 仔细理解<Part 1>的<项目规范>,<业务概念>,<常用方法>,以及<代码示例>里面的注释内容,思考如何按照<Part 1>的<项目规范>实现代码
- 现在开始,我认为你已经准备就绪,接下来请为我生成request层的代码,格式需要和<代码示例>中<代码格式>小节保持一致;
- 以"### request层\n"开头,遵循<编码规则>编写代码